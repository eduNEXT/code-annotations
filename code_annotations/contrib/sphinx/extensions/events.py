"""
Sphinx extension for viewing feature toggle annotations.
"""
import os

from docutils import nodes
from sphinx.util.docutils import SphinxDirective

from code_annotations.contrib.config import EVENTS_ANNOTATIONS_CONFIG_PATH

from .base import find_annotations


def find_events(source_path):
    """
    Find the Open edX Events as defined in the configuration file.

    Return:
        events (dict): openedxevents indexed by type.
    """
    return find_annotations(
        source_path, EVENTS_ANNOTATIONS_CONFIG_PATH, ".. event_type:"
    )


class OpenEdxEvents(SphinxDirective):
    """
    Sphinx directive to list the openedxevents in a single documentation page.

    Use this directive as follows::

        .. openedxevents::

    This directive supports the following configuration parameters:

    - ``openedxevents_source_path``: absolute path to the repository file tree. E.g:

        openedxevents_source_path = os.path.join(os.path.dirname(__file__), "..", "..")

    - ``openedxevents_repo_url``: Github repository where the code is hosted. E.g:

        openedxevents_repo_url = "https://github.com/edx/myrepo"

    - ``openedxevents_repo_version``: current version of the git repository. E.g:

        import git
        try:
            repo = git.Repo(search_parent_directories=True)
            openedxevents_repo_version = repo.head.object.hexsha
        except git.InvalidGitRepositoryError:
            openedxevents_repo_version = "master"
    """

    required_arguments = 0
    optional_arguments = 0
    option_spec = {}

    def run(self):
        """
        Public interface of the Directive class.

        Return:
            nodes (list): nodes to be appended to the resulting document.
        """
        return list(self.iter_nodes())

    def iter_nodes(self):
        """
        Iterate on the docutils nodes generated by this directive.
        """
        events = find_events(self.env.config.openedxevents_source_path)

        for event_type in sorted(events):
            event = events[event_type]
            event_section = nodes.section("", ids=[f"openedx_event-{event_type}"])
            event_section += nodes.title(text=event_type)
            event_section += nodes.paragraph(
                "",
                "Source: ",
                nodes.reference(
                    text="{} (line {})".format(
                        event["filename"], event["line_number"]
                    ),
                    refuri="{}/blob/{}/{}#L{}".format(
                        self.env.config.openedxevents_repo_url,
                        self.env.config.openedxevents_repo_version,
                        event["filename"],
                        event["line_number"],
                    ),
                ),
            )
            event_section += nodes.paragraph(
                text=event.get(".. event_name:", "")
            )
            event_section += nodes.paragraph(
                text=event.get(".. event_description:", "")
            )
            event_section += nodes.paragraph(
                text=event.get(".. event_data:", "")
            )
            yield event_section


def setup(app):
    """
    Declare the Sphinx extension.
    """
    app.add_config_value(
        "openedxevents_source_path",
         os.path.abspath(".."),
        "env",
    )
    app.add_config_value("openedxevents_repo_url", "", "env")
    app.add_config_value("openedxevents_repo_version", "master", "env")
    app.add_directive("openedxevents", OpenEdxEvents)

    return {
        "version": "0.1",
        "parallel_read_safe": True,
        "parallel_write_safe": True,
    }
